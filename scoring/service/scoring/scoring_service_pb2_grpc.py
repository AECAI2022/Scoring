# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import scoring_service_pb2 as scoring__service__pb2


class ScoringStub(object):
    """When a new floorplan enters the database, add a boolean variable 'Updated' to show whether it is new. Then in the next scanning time, change the status to False.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetNewGraph = channel.unary_stream(
                '/scoring.Scoring/GetNewGraph',
                request_serializer=scoring__service__pb2.Database.SerializeToString,
                response_deserializer=scoring__service__pb2.Floorplan.FromString,
                )
        self.GenerateGraph = channel.unary_unary(
                '/scoring.Scoring/GenerateGraph',
                request_serializer=scoring__service__pb2.Floorplan.SerializeToString,
                response_deserializer=scoring__service__pb2.Graph.FromString,
                )
        self.GenerateScore = channel.unary_unary(
                '/scoring.Scoring/GenerateScore',
                request_serializer=scoring__service__pb2.Graph.SerializeToString,
                response_deserializer=scoring__service__pb2.Scores.FromString,
                )


class ScoringServicer(object):
    """When a new floorplan enters the database, add a boolean variable 'Updated' to show whether it is new. Then in the next scanning time, change the status to False.
    """

    def GetNewGraph(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateGraph(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateScore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ScoringServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetNewGraph': grpc.unary_stream_rpc_method_handler(
                    servicer.GetNewGraph,
                    request_deserializer=scoring__service__pb2.Database.FromString,
                    response_serializer=scoring__service__pb2.Floorplan.SerializeToString,
            ),
            'GenerateGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateGraph,
                    request_deserializer=scoring__service__pb2.Floorplan.FromString,
                    response_serializer=scoring__service__pb2.Graph.SerializeToString,
            ),
            'GenerateScore': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateScore,
                    request_deserializer=scoring__service__pb2.Graph.FromString,
                    response_serializer=scoring__service__pb2.Scores.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scoring.Scoring', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Scoring(object):
    """When a new floorplan enters the database, add a boolean variable 'Updated' to show whether it is new. Then in the next scanning time, change the status to False.
    """

    @staticmethod
    def GetNewGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/scoring.Scoring/GetNewGraph',
            scoring__service__pb2.Database.SerializeToString,
            scoring__service__pb2.Floorplan.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scoring.Scoring/GenerateGraph',
            scoring__service__pb2.Floorplan.SerializeToString,
            scoring__service__pb2.Graph.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateScore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scoring.Scoring/GenerateScore',
            scoring__service__pb2.Graph.SerializeToString,
            scoring__service__pb2.Scores.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
